{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-BoldOblique;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10220\viewh10340\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\qc

\f0\fs50 \cf0 /common/functions/dblib.php
\fs24 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 \

\fs18 Use by including the following php command, before trying to use the database:\

\f1\i\b include($_SERVER[DOCUMENT_ROOT]."/common/functions/dblib.php");
\f0\i0\b0 \
\
\

\f1\i\b function db_connect($dbhost, $dbname, $dbuser, $dbpass)
\f0\i0\b0 \
connect to the database $dbname on $dbhost with the user/password pair $dbuser and $dbpass.\
\

\f1\i\b function db_query($query, $debug=false, $die_on_debug=true, $silent=false) \

\f0\i0\b0 run the query $query against the current database.  if $debug is true, then we will just display the query on screen.  if $die_on_debug is true, and $debug is true, then we will stop the script after printing he debug message, otherwise we will run the query.  if $silent is true then we will surpress all error messages, otherwise we will print out that a database error has occurred\
\

\f1\i\b function db_fetch_array($qid) \

\f0\i0\b0 grab the next row from the query result identifier $qid, and return it as an associative array.  if there are no more results, return FALSE\
\

\f1\i\b function db_fetch_row($qid) \

\f0\i0\b0 grab the next row from the query result identifier $qid, and return it as an array.  if there are no more results, return FALSE\
\

\f1\i\b function db_fetch_object($qid) 
\f0\i0\b0 \
grab the next row from the query result identifier $qid, and return it as an object.  if there are no more results, return FALSE\
\

\f1\i\b function db_num_rows($qid) \

\f0\i0\b0 return the number of records (rows) returned from the SELECT query with the query result identifier $qid.\
\

\f1\i\b function db_affected_rows() \

\f0\i0\b0 return the number of rows affected by the last INSERT, UPDATE, or DELETE query\
\

\f1\i\b function db_insert_id() \

\f0\i0\b0 if you just INSERTed a new row into a table with an autonumber, call this function to give you the ID of the new autonumber value\
\

\f1\i\b function db_free_result($qid) \

\f0\i0\b0 free up the resources used by the query result identifier $qid\
\

\f1\i\b function db_num_fields($qid) \

\f0\i0\b0 return the number of fields returned from the SELECT query with the identifier $qid\
\

\f1\i\b function db_field_name($qid, $fieldno) \

\f0\i0\b0 return the name of the field number $fieldno returned from the SELECT query with the identifier $qid\
\

\f1\i\b function db_data_seek($qid, $row) \

\f0\i0\b0 move the database cursor to row $row on the SELECT query with the identifier $qid\
\

\f1\i\b function db_query_loop($query, $prefix, $suffix, $found_str, $default="") \

\f0\i0\b0 this is an internal function and normally isn't called by the user.  it loops through the results of a select query $query and prints HTML around it, for use by things like listboxes and radio selections\
\

\f1\i\b function db_listbox($query, $default="", $suffix="\\n") \

\f0\i0\b0 generate the <option> statements for a <select> listbox, based on the results of a SELECT query ($query).  any results that match $default are pre-selected, $default can be a string or an array in the case of multi-select listboxes.  $suffix is printed at the end of each <option> statement, and normally is just a line break\
\

\f1\i\b function strip_querystring($url) \

\f0\i0\b0 takes a URL and returns it without the querystring portion\
\

\f1\i\b function db_disconnect()\

\f0\i0\b0 disconnect from the database, we normally don't have to call this function because PHP will handle it}